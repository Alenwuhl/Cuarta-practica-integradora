paths:
  /api/carts:
    get:
      summary: Obtiene todos los carritos.
      tags:
        - Carts
      responses:
        200:
          description: Lista de todos los carritos disponibles.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Cart'
        500:
          description: Error interno del servidor.
    post:
      summary: Crea un nuevo carrito.
      security:
        - BearerAuth: ['user', 'premium']
      tags:
        - Carts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Cart'
      responses:
        200:
          description: Carrito creado exitosamente.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        400:
          description: Faltan propiedades obligatorias para la creación del carrito.
        500:
          description: Error interno del servidor.
  /api/carts/{cid}:
    get:
      summary: Obtiene un carrito específico por su ID.
      tags:
        - Carts
      parameters:
        - in: path
          name: cid
          required: true
          schema:
            type: string
          description: ID del carrito a obtener.
      responses:
        200:
          description: Detalles del carrito especificado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        404:
          description: Carrito no encontrado.
        500:
          description: Error interno del servidor.
          
  /api/carts/{cartId}/product:
    post:
      summary: Agrega un producto a un carrito específico.
      tags:
        - Carts
      parameters:
        - in: path
          name: cartId
          required: true
          schema:
            type: string
          description: ID del carrito al que se le agregará el producto.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                productId:
                  type: string
                quantity:
                  type: integer
      responses:
        200:
          description: Producto agregado al carrito exitosamente.
        404:
          description: Producto o carrito no encontrado.
        500:
          description: Error interno del servidor.

  /api/carts/cart/{cartId}/product/{productId}:
    delete:
      summary: Elimina un producto específico de un carrito.
      tags:
        - Carts
      parameters:
        - in: path
          name: cartId
          required: true
          schema:
            type: string
          description: ID del carrito del que se eliminará el producto.
        - in: path
          name: productId
          required: true
          schema:
            type: string
          description: ID del producto a eliminar del carrito.
      responses:
        200:
          description: Producto eliminado del carrito exitosamente.
        404:
          description: Producto o carrito no encontrado.
        500:
          description: Error interno del servidor.

components:
  securitySchemes:
    BearerAuth: ['user', 'premium']
  schemas:
    Cart:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/CartItem'
    CartItem:
      type: object
      properties:
        productId:
          type: string
          description: ID del producto en el carrito.
        quantity:
          type: integer
          description: Cantidad del producto en el carrito.
          minimum: 1